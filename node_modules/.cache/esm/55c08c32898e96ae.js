let express,ApolloServer,PORT,typeDefs,resolvers,AppModels,join,connect_DB,schemaDirectives,cors,AuthMiddleware,bodyparser;_898‍.w("express",[["default",["express"],function(v){express=v}]]);_898‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}]]);_898‍.w("./config",[["PORT",["PORT"],function(v){PORT=v}]]);_898‍.w("./graphql/typeDefs",[["default",["typeDefs"],function(v){typeDefs=v}]]);_898‍.w("./graphql/resolvers",[["default",["resolvers"],function(v){resolvers=v}]]);_898‍.w("./models",[["*",null,function(v){AppModels=v}]]);_898‍.w("path",[["join",["join"],function(v){join=v}]]);_898‍.w("./db",[["connect_DB",["connect_DB"],function(v){connect_DB=v}]]);_898‍.w("./graphql/directives",[["schemaDirectives",["schemaDirectives"],function(v){schemaDirectives=v}]]);_898‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_898‍.w("./middlewares/auth",[["default",["AuthMiddleware"],function(v){AuthMiddleware=v}]]);_898‍.w("body-parser",[["default",["bodyparser"],function(v){bodyparser=v}]]);












const port = process.env.PORT || PORT;

const app = express();

app.use(cors());

_898‍.g.console.log(join(__dirname, '..', 'uploads'));
app.use(AuthMiddleware);
app.use('', express.static(join(__dirname, '..', 'uploads')));
const startApp = () => {
	connect_DB();
	const server = new ApolloServer({
		resolvers:resolvers,
		typeDefs:typeDefs,
		schemaDirectives:schemaDirectives,
		introspection: true,
		playground: true,
		context: ({ req }) => {
			let { isAuth, user } = req;
			return {
				req,
				user,
				isAuth,
				...AppModels
			};
		}
	});
	server.applyMiddleware({ app });
	app.listen(port, () => {
		console.log(`Server is running at port ${port}`);
	});
};
startApp();
