let Schema,model,bcrypt,mongoosePaginate,mongoose;_5b0‍.x([["default",()=>_5b0‍.o]]);_5b0‍.w("mongoose",[["Schema",["Schema"],function(v){Schema=v}],["model",["model"],function(v){model=v}],["default",["mongoose"],function(v){mongoose=v}]]);_5b0‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_5b0‍.w("mongoose-paginate-v2",[["default",["mongoosePaginate"],function(v){mongoosePaginate=v}]]);



const userSchema = new Schema({
    username:{
        type:String,
        required:[true,'Username must not be empty']
    },
    email:{
        type:String,
        required:[true,'Email must not be empty'],
        unique:[true,'Your email address is already used!']
    },
    password:{
        type:String,
        required:true,
        min:[8,'Password length must be greather than 8.']
    },
    role:{
        type:String,
        enum:['admin','super_admin','seller','buyer'],
        default:'buyer'
    },
    additional_info:{
        type:mongoose.Types.ObjectId,
        ref:'info'
    }
},{timestamps:true});
userSchema.plugin(mongoosePaginate);
userSchema.pre('save',function(next){
    var user =this;
    if(!user.isModified('password'))
    return next();
    bcrypt.hash(user.password,12,function(err,hash){
        if(err) return next(err);
        user.password = hash;
        next();
    })
})

_5b0‍.d(model("user",userSchema));